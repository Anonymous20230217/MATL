( x : numpy array or any class cntk ops function function that output a tensor ) ( axis : class cntk axis axis axis along which the softmax operation will be perform ) ( name : the name of the function instance in the network )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
( operand : input of the batch normalization operation ) ( scale : parameter tensor that hold the learn componentwise scale factor ) ( bias : parameter tensor that hold the learn bias scale and bias must have the same dimension which must be equal to the input dimension in case of spatial false or number of output convolution feature map in case of spatial true ) ( run mean : run mean which be use during evaluation phase and might be use during train as well you must pass a constant tensor with initial value 0 and the same dimension as scale and bias ) ( run inv std : run variance represent as run mean ) ( spatial : flag that indicate whether to compute mean/var for each feature in a minibatch independently or in case of convolutional layer per future map ) ( normalization time constant : time constant for compute run average of mean and variance as a low pass filter version of the batch statistics ) ( blend time constant : constant for smooth batch estimate with the run statistics ) ( epsilon : conditioner constant add to the variance when compute the inverse standard deviation ) ( use cudnn engine : ) ( disable regularization : turn off regularization in batch normalization ) ( name : the name of the function instance in the network ) ( run count : denote the total number of sample that have be use so far to compute the run mean and run inv std parameters you must pass a scalar either rank 0 constant val )
